stages:
  - checkout
  - build
  - docker
  - security_scan
  - deploy
  - load_test

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

# 1️⃣ Checkout
checkout:
  stage: checkout
  script:
    - echo "Repository at $CI_PROJECT_DIR"
  rules:
    - when: always

# 2️⃣ BUILD jobs
build_go:
  stage: build
  tags: [shell, go]
  script:
    - go version
    - cd src/inventory-management && go build -v
    - cd ../product-catalog    && go build -v
  artifacts:
    paths:
      - src/inventory-management/inventory-management
      - src/product-catalog/product-catalog

build_maven:
  stage: build
  tags: [shell, maven]
  script:
    - mvn --version
    - cd src/shopping-cart   && mvn clean package -DskipTests -B
    - cd ../order-processing && mvn clean package -DskipTests -B
  artifacts:
    paths:
      - src/shopping-cart/target/*.jar
      - src/order-processing/target/*.jar

build_angular:
  stage: build
  tags: [shell, nodejs]
  script:
    - node --version
    - cd src/store-ui
    - npm ci
    - npm run build
  artifacts:
    paths:
      - src/store-ui/dist/

# 3️⃣ Docker: build & push
docker:
  stage: docker
  tags: [shell]
  script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - |
      VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
      declare -A images=(
        [products]=src/product-catalog
        [cart]=src/shopping-cart
        [orders]=src/order-processing
        [inventory]=src/inventory-management
        [store]=src/store-ui
      )
      for name in "${!images[@]}"; do
        ctx=${images[$name]}
        echo "Building and pushing $name from $ctx with tag $VERSION"
        docker build --pull -t "$DOCKERHUB_USERNAME/$name:$VERSION" "$ctx"
        docker push "$DOCKERHUB_USERNAME/$name:$VERSION"
      done

# 4️⃣ Security scan
security_scan:
  stage: security_scan
  tags: [shell]
  script:
    - trivy fs --no-progress --format table --output docs/trivy/trivyfs.txt .
    - |
      for img in products orders cart inventory; do
        trivy image --no-progress --format table \
          --output docs/trivy/images/${img}.txt \
          "$DOCKERHUB_USERNAME/$img:latest"
      done
  artifacts:
    paths:
      - docs/trivy/
    expire_in: 1 week

# 5️⃣ Deploy & ArgoCD sync
deploy:
  stage: deploy
  tags: [shell]
  script:
    - VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - git clone https://oauth2:$GITLAB_TOKEN@gitlab.com/$GITLAB_USER_NAME/otel-mastery-manifests.git
    - cd otel-mastery-manifests
    - |
      declare -A manifests=(
        [products]=store-app/product-catalog.yaml
        [cart]=store-app/shopping-cart.yaml
        [orders]=store-app/order-processing.yaml
        [inventory]=store-app/inventory-management.yaml
        [store]=store-app/store-ui.yaml
      )
      for name in "${!manifests[@]}"; do
        manifest=${manifests[$name]}
        echo "Updating image in $manifest to $DOCKERHUB_USERNAME/$name:$VERSION"
        sed -i "s|image: .*/$name:.*|image: $DOCKERHUB_USERNAME/$name:$VERSION|" "$manifest"
      done
    - git config user.email "$GITLAB_USER_EMAIL"
    - git config user.name "$GITLAB_USER_NAME"
    - git add store-app/*.yaml
    - git commit -m "Update image tags to $VERSION [skip-ci]" || echo "No changes to commit"
    - git push origin main
  only:
    - master
  rules:
    - if: '$CI_COMMIT_MESSAGE !~ /skip-ci/'

# 6️⃣ Load test with JMeter
load_test:
  stage: load_test
  tags: [shell]
  script:
    - cd jmeter
    - jmeter -n -t script.jmx -l results.jtl
  artifacts:
    paths:
      - jmeter/results.jtl
      - jmeter/jmeter.log
    expire_in: 1 week
