apiVersion: v1
kind: Secret
metadata:
  name: minio-credentials
  namespace: store-monitoring
type: Opaque
data:
  rootuser: bWluaW8=
  rootpassword: bWluaW8xMjM=
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: store-monitoring
spec:
  serviceName: minio
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio
        args:
        - server
        - /data
        - --console-address
        - ":9001"
        env:
        - name: MINIO_ROOT_USER 
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: rootuser
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: rootpassword
        ports:
        - containerPort: 9000
          name: s3
        - containerPort: 9001
          name: console
        volumeMounts:
        - name: data
          mountPath: /data
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: s3
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: api
          initialDelaySeconds: 10
          periodSeconds: 20
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: store-monitoring
spec:
  ports:
  - port: 9000
    targetPort: s3
    name: s3
  - port: 9001
    targetPort: console
    name: console
  selector:
    app: minio
---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-bucket-creation
  namespace: store-monitoring
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-minio
        image: busybox:1.36
        command: ['/bin/sh', '-c']
        args:
        - |
          echo "Waiting for MinIO to be ready..."
          # Try both service DNS names and add retry logic
          for i in $(seq 1 60); do
            if nc -z minio 9000 || nc -z minio.store-monitoring.svc.cluster.local 9000; then
              echo "MinIO is ready!"
              exit 0
            fi
            echo "MinIO is not ready yet. Attempt $i/60. Sleeping for 5 seconds..."
            sleep 5
          done
          echo "Timed out waiting for MinIO to become ready"
          exit 1
      containers:
      - name: mc
        image: minio/mc:RELEASE.2023-09-07T22-48-55Z
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Sleeping for 10 seconds to ensure MinIO is fully initialized..."
          sleep 10
          
          echo "Configuring MinIO client..."
          # Add retry logic for client configuration
          for i in $(seq 1 5); do
            if mc config host add myminio http://minio:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"; then
              echo "Successfully configured MinIO client"
              break
            fi
            echo "Failed to configure MinIO client. Attempt $i/5. Retrying in 5 seconds..."
            sleep 5
          done
          
          echo "Creating bucket if it doesn't exist..."
          # Add retry logic for bucket creation
          for i in $(seq 1 5); do
            if mc mb --ignore-existing myminio/mimir-data; then
              echo "Successfully created or confirmed bucket mimir-data"
              exit 0
            fi
            echo "Failed to create bucket. Attempt $i/5. Retrying in 5 seconds..."
            sleep 5
          done
          
          echo "Failed to create bucket after multiple attempts"
          exit 1
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: rootuser
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: rootpassword
      restartPolicy: OnFailure
  backoffLimit: 3
